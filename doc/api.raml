#%RAML 0.8
title: CouponCode
version: v1
baseUri: http://server/api/{version}
mediaType: application/json
schemas:
  - couponOrder: |
      {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type" : "object",
        "description" : "An order with coupon applied.",
        "properties": {
          "couponCode": {
              "type": "string"
          },
          "orderId": {
            "type" : "string"
          },
          "orderName": {
            "type" : "string"
          },
          "orderValue": {
            "type" : "object",
            "properties" : {
              "original" : {
                "type" : "number"
              },
              "final" : {
                "type" : "number"
              },
              "required" : ["original", "final"]
            }
          },
          "rebated": {
            "type" : "boolean"
          },
          "rebateValue": {
            "type" : "number"
          }
        },
        "required": ["couponCode", "orderId", "orderValue", "rebated"] 
      }
  - coupon: |
      {
         "$schema": "http://json-schema.org/draft-04/schema#",
         "type": "object",
         "properties": {
            "couponCode" : {
              "type" : "string"
            },
            "username" : {
              "type": "string"
            },
            "couponRule" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum": ["perc", "cash"]
                },
                "value": {
                  "type" : "number",
                  "minimum": 0,
                  "description" : "must be less than 100 when type is perc."
                }
              },
              "required" : ["type", "value"]
            },
            "rebateRule" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum": ["perc", "cash"]
                },
                "value": {
                  "type" : "number",
                  "minimum": 0,
                  "description" : "must be less than 100 when type is perc."
                }
              },
              "required" : ["type", "value"]
            },
            "valid" : {
              "type" : "boolean",
              "defualt" : true
            }
         },
         "required": ["couponCode", "username", "couponRule", "rebateRule"]  
      }
/coupons:
  displayName: coupons
  get:    
    description: list all the coupons (admin only)
    queryParameters:
      signedToken:
        required: true
        type: string
  post:
    description: create a new coupon. signedToken is used for admin to create coupon with rules. Post request without signedKey will create coupon with default rule regardless of the rules passed in, ie. ignoring couponRule and rebateRule.
    body:
      application/json:
        schema : coupon without coupon code
        example: |
          {
            "username": "test1",
            "mobile": "12345356467",
            "couponRule" : {
              "type" : "perc",
              "value" : 10
            },
            "rebateRule": {
              "type": "cash",
              "value": 100
            },
            "signedToken" : "dfsdoiuwqe"
          }
    responses:
      201:
        body:
          application/json:
            schema: coupon
            example: |
              {
                "couponCode" : "test1perc10",
                "username": "test1",
                "couponRule": {
                  "type" : "perc",
                  "value" : 10
                },
                "rebateRule": {
                  "type": "cash",
                  "value": 100
                }
              }
    
      
      406:
        description: returned when Json posted has invalid properties
        body:
          application/json:
            example: | 
              {
                "message" : "mobile is required."
              }
      
  /defaultRules:
    displayName: defaultRules
    get:
      description: get default rules.
      responses:
        200:
          body:
            application/json:
              schema: see coupon schema rules section
              example: | 
                {
                  "couponRule": {
                    "type" : "perc",
                    "value" : 10
                  },
                  "rebateRule": {
                    "type": "cash",
                    "value": 100
                  }
                }  
    put:
      description: update default rules, must pass in signed token.
      queryParameters:   
        rebateType:
          required: false
          type: string
          enum: ["perc", "cash"]
        rebateValue:
          required: false
          type: integer
        couponType:
          required: false
        couponValue:
          required: false
        signedToken:
          required: true
          type: string
  /{couponCode}:
    displayName: couponCode
    get:
      description: get the details of a coupon
    delete:
      description: delete a coupon, require an admin signed token.
    put:
      description: update a coupon, require an admin signed token.
    /orders:
      displayName: orders
      get:
        description: list all the orders linked to this coupon, signedToken required.
        queryParameters:
          rebated:
            required: true
            default: false
            type: boolean
          showTotalNum:
            required: false
            type: boolean
            default: false
            description: only the total number of orders lined to this coupon code.
          signedToken:
            required: true
            type: string
      post:
        description: link an order with this coupon, and return the discounted order for verification
        body:
          application/json:
            example: |
              {
                "orderId" : "guid...",
                "orderName" : "physics01",
                "orderValue" : {
                  "original" : 1000,
                  "final" : 800
                },
                "clientId" : "guid..."
              }
        responses:
          201:
            body:
              application/json:
                schema: couponOrder
                example: |
                  {
                    "orderId" : "guid....",
                    "couponCode" : "test1perc10",
                    "rebated" : false,
                    "rebateValue" : 100  
                  }        
      /{orderId}:
        displayName: order id
        get:
          description: get the order details with coupon code
          responses:
            200:
              body:
                application/json:
                  schema: couponOrder
        put:
          queryParameters:
            signedToken:
              required: true
            rebated:
              required: false
              type: boolean
            rebateValue:
              required: false
          description: update coupon-order record.
    /discount:
      displayName: discount
      get:
        description: get discounted order after applying the coupon
        queryParameters:
          orderId:
            required: false
          orderValue:
            required: true
            type: integer
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "coupon" : {coupon},
                    "discountedValue": 800
                    "orderId" : "guid..."
                  }
          
          406:
            description: when couponcode is not valid
            body:
              application/json:
                example: |
                  {
                    "message" : "coupon code 123124 is not valid"
                  }
  /user:
    displayName: user
    /{username}:
      displayName: username
      get:
        description: get coupon codes by user name
        responses:
          200:
            body:
              application/json:
                schema: coupon
                example: |
                  {
                    "couponCode": "user1cash10",
                    "username": {username},
                    "couponRule": {
                      "type": "PERCENTAGE",
                      "value": 10
                    },
                    "rebateRule": {
                      "type": "CASH",
                      "value": 100
                    }
                  }
          404:
            description: when username does not exits
            body:
              application/json:
                example: |
                  {
                    "message" : "username test01 does not have any coupon code."
                  }
      post:
        description: create a new coupon code for user, similar to post to /coupons. 