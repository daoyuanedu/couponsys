#%RAML 0.8
title: CouponCode
version: v1
baseUri: http://server/api/{version}
mediaType: application/json
schemas:
  - couponOrder: |
      {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type" : "object",
        "description" : "An order with coupon applied.",
        "properties": {
          "couponCode": {
              "type": "string"
          },
          "orderId": {
            "type" : "string"
          },
          "orderName": {
            "type" : "string"
          },
          "orderValue": {
            "type" : "object",
            "properties" : {
              "original" : {
                "type" : "number"
              },
              "final" : {
                "type" : "number"
              }
            },
            "required" : ["original", "final"]
          },
          "rebated": {
            "type" : "boolean"
          },
          "rebateValue": {
            "type" : "number"
          }
        },
        "required": ["couponCode", "orderId", "orderValue", "rebated"]
      }
  - coupon: |
      {
         "$schema": "http://json-schema.org/draft-04/schema#",
         "type": "object",
         "properties": {
            "couponCode" : {
              "type" : "string"
            },
            "username" : {
              "type": "string"
            },
            "couponRule" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum": ["perc", "cash"]
                },
                "value": {
                  "type" : "number",
                  "minimum": 0,
                  "description" : "must be less than 100 when type is perc."
                }
              },
              "required" : ["type", "value"]
            },
            "rebateRule" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum": ["perc", "cash"]
                },
                "value": {
                  "type" : "number",
                  "minimum": 0,
                  "description" : "must be less than 100 when type is perc."
                }
              },
              "required" : ["type", "value"]
            },
            "valid" : {
              "type" : "boolean",
              "defualt" : true
            },
            "couponType" : {
              "type" : "string",
              "default" : "NORMAL",
              "enum" : ["NORMAL", "SALES"]
            }
         },
         "required": ["couponCode", "username", "couponRule", "rebateRule", "couponType"]
      }
/coupons:
  displayName: coupons
  get:
    description: list all the coupons (admin only)
    queryParameters:
      token:
        required: true
        type: string
  post:
    description: |
     create a new coupon. signedToken is used for admin to create coupon with rules. Post request without signedKey will create coupon with default rule regardless of the rules passed in, ie. ignoring couponRule and rebateRule.
     New bussiness model utilises coupon as a sales ref, hence, each coupon code has a type to identify if its type. By default, it's normal, with token, client can create other types of coupon, for example: SALES.
    body:
      application/json:
        schema : coupon without coupon code
        example: |
          {
            "username": "test1",
            "mobile": "12345356467",
            "couponRule" : {
              "type" : "perc",
              "value" : 10
            },
            "rebateRule": {
              "type": "cash",
              "value": 100
            },
            "token" : "dfsdoiuwqe"
          }
    responses:
      201:
        body:
          application/json:
            schema: coupon
            example: |
              {
                "couponCode" : "test1perc10",
                "username": "test1",
                "couponRule": {
                  "type" : "perc",
                  "value" : 10
                },
                "rebateRule": {
                  "type": "cash",
                  "value": 100
                }
              }


      406:
        description: returned when Json posted has invalid properties
        body:
          application/json:
            example: |
              {
                "message" : "mobile is required."
              }

  /login:
    displayName: login
    post:
      description: login use username and password, return a signed token
      body:
        application/json:
          example: |
            {
              "username" : "admin1",
              "password" : "adminHash"
            }
      responses:
        201:
          body:
            application/json:
              example: |
                {
                  "success" : true,
                  "token" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoidGVzdEFkbWluMSIsImlhdCI6MTQ3OTUwMzQ2MCwiZXhwIjoxNDc5NTA3MDYwfQ.p6JQc9ksEI2aQPD3Lw8kepCvHCqcYpM94bpUrs4zotY"
                }
        401:
          description: Auth failed.
  /defaultRules:
    displayName: defaultRules
    get:
      description: get default rules.
      responses:
        200:
          body:
            application/json:
              schema: see coupon schema rules section
              example: |
                {
                  "couponRule": {
                    "type" : "perc",
                    "value" : 10
                  },
                  "rebateRule": {
                    "type": "cash",
                    "value": 100
                  }
                }
    put:
      description: update default rules, must pass in signed token.
      queryParameters:
        rebateType:
          required: false
          type: string
          enum: ["perc", "cash"]
        rebateValue:
          required: false
          type: integer
        couponType:
          required: false
        couponValue:
          required: false
        token:
          required: true
          type: string
  /{couponCode}:
    displayName: couponCode
    get:
      description: get the details of a coupon
    delete:
      description: delete a coupon, require an admin signed token.
    put:
      description: update a coupon, require an admin signed token.
    /orders:
      displayName: orders
      get:
        description: list all the orders linked to this coupon, signedToken required.
        queryParameters:
          rebated:
            required: true
            default: false
            type: boolean
            description: leave out for all orders
          showTotalNum:
            required: false
            type: boolean
            default: false
            description: only the total number of orders lined to this coupon code.
          filter:
            required: false
            type: string
            default: all
            enum: ["all", "direct", "salesRef"]
            description: show all orders / only orders using this code / only orders with a sales ref to this code
          token:
            required: true
            type: string
          since:
              required: false
              type: string
              description: list orders since this date, string required in a format where a Date object can be created from (http://www.w3schools.com/js/js_date_formats.asp).
              example: 2016-11-27
          until:
              required: false
              type: string
              description: list orders up to this date, string required in a format where a Date object can be created from (http://www.w3schools.com/js/js_date_formats.asp).
              example: 2015-03-25T12:00:00
      post:
        description: link an order with this coupon, and return the discounted order for verification
        body:
          application/json:
            example: |
              {
                "orderId" : "order1239852",
                "orderName" : "physics01",
                "orderValue" : {
                  "original" : 1000,
                  "final" : 800
                },
                "username" : "userA"
              }
        responses:
          201:
            body:
              application/json:
                schema: couponOrder
                example: |
                  {
                    "orderId" : "guid....",
                    "couponCode" : "test1perc10",
                    "orderValue" : {
                      "original" : 1000,
                      "final" : 800
                    },
                    "rebated" : false,
                    "rebateValue" : 100
                  }
          403:
            description: when the coupon code is not applicable to this user, hence invalid order.
            body:
              application/json:
                example: |
                  {
                    "message" : "coupon code 123123 is not valid for userA"
                  }
      /{orderId}:
        displayName: order id
        get:
          description: get the order details with coupon code
          responses:
            200:
              body:
                application/json:
                  schema: couponOrder
        put:
          queryParameters:
            token:
              required: true
            rebated:
              required: false
              type: boolean
            rebateValue:
              required: false
          description: update coupon-order record.
    /discount:
      displayName: discount
      get:
        description: get discounted order after applying the coupon
        queryParameters:
          orderId:
            required: false
          orderValue:
            required: true
            type: integer
          username:
            required: true
            type: string
            description: used to verify if this coupon is applicable to this user.
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "coupon" : "userAPerc10",
                    "discountedValue": 800
                  }

          406:
            description: when couponcode is not valid
            body:
              application/json:
                example: |
                  {
                    "message" : "coupon code 123124 is not valid"
                  }
          403:
            description: when the coupon code is not applicable to this user
            body:
              application/json:
                example: |
                  {
                    "message" : "coupon code 123123 is not valid for userA"
                  }
  /orders:
    displayName: orders
    description: mostly serverd as a shortcut to /coupons/{couponCode}/orders/{orderId}
    post:
      description: create a new coupon order
      body:
        application/json:
          schema: couponOrder
    get:
      description: get all the orders with filters applied.
      queryParameters:
        token:
          required: true
          type: string
          description: token for admin auth.
        rebated:
          required: false
          type: boolean
        since:
            required: false
            type: string
            description: list orders since this date, string required in a format where a Date object can be created from (http://www.w3schools.com/js/js_date_formats.asp).
            example: 2016-11-27
        until:
            required: false
            type: string
            description: list orders up to this date, string required in a format where a Date object can be created from (http://www.w3schools.com/js/js_date_formats.asp).
            example: 2015-03-25T12:00:00

    /{orderId}:
      displayName: orderId
      get:
        description: get a coupon order by orderId
      put:
        description: edit a coupon order, required admin signed token
  /users:
    displayName: user
    /{username}:
      displayName: username
      get:
        description: get coupon codes by user name.
        queryParameters:
          showTotalOrderNumber:
            required: false
            default:  false
            description: if set true, return the number of orders using the coupons/coupon belong to this user.
        responses:
          200:
            body:
              application/json:
                schema: a list of coupons
                example: |
                  {
                    "coupons":
                      [
                        {
                          "couponCode": "user1cash10",
                          "username": "user1",
                          "couponRule": {
                            "type": "PERCENTAGE",
                            "value": 10
                          },
                          "rebateRule": {
                            "type": "CASH",
                            "value": 100
                          }
                        }
                      ],
                    "totalCouponOrders": 25
                  }
          404:
            description: when username does not exits
            body:
              application/json:
                example: |
                  {
                    "message" : "username test01 does not have any coupon code."
                  }
      /orders:
        displayName: orders
        get:
          description: list all the orders linked to the coupons belong to this user. Auth required.
      post:
        description: create a new coupon code for user, similar to post to /coupons. 